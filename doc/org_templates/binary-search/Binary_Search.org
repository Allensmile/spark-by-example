#+EXPORT_FILE_NAME: ../../../binary-search/Binary_Search.org
#+OPTIONS: author: nil title: nil toc: nil
** The Binary_Search algorithm

   The ~Binary_Search~ algorithm is a search in a sorted array. Its signature can be expressed:
   ~function Binary_Search (A : T_Arr; Val : T) return Boolean~
   It will return true if ~Val~ is contained in ~A~.
*** Specification of Binary_Search
    
    The specification of ~Binary_Search~ can be the following:
    #+INCLUDE: ../../../binary-search/binary_search_p.ads :src ada :lines "8-10"

The first precondition specifies that the array has to be sorted.
The second is here because we will use ~Search_Lower_Bound~ function defined above.
If we don't specify that ~A'Last < Positive'Last~, we might encounter a message like
~precondition might fail~ during the proof. The difference between ~Find~ and 
~Binary_Search~ is that ~Find~ has a linear complexity whereas ~Binary_Search~
has a logarithmic complexity.

*** Implementation of Binary_Search

    The implementation of ~Binary_Search~ can be:
    
    #+INCLUDE: ../../../binary-search/binary_search_p.adb :src ada :lines "3-14"

    Note that if ~Low.Exists = True~, ~Val <= A(Low.Value)~ is always true. This
    is why we only check for ~A (I) <= Val~ to be true.

    Using ~gnatprove~, the function is proved.

# Local Variables:
# ispell-dictionary: "english"
# End:
