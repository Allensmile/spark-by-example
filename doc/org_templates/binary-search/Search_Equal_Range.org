#+EXPORT_FILE_NAME: ../../../binary-search/Search_Equal_Ranges.org
#+OPTIONS: author:nil title:nil toc:nil
** The Search_Equal_Range Algorithm

The ~Search_Equal_Range~ algorithm will find the range of a given value ~V~ in a given array ~A~.

Its signature can be expressed as :

#+BEGIN_SRC ada 
 function Search_Equal_Range(A : T_Arr; V : T) return Option_Pair
#+END_SRC

This function returns an ~Option_Pair~ defined by:

#+INCLUDE: ../../../spec/types.ads :src ada :lines "29-38"


If ~Result~ is of type ~Option_Pair~, and equal to the result of ~Search_Equal_Range(A,V)~,
 then these inequalities are verified, provided that ~Result.Exists~ is true:
- for all ~K~ in ~A'First .. Result.Lower - 1~ then ~A(K) < V~ (This range may be empty)
- for all ~K~ in ~Result.Lower .. Result.Upper - 1~ then ~A(K) = V~ (This range may be empty)
- for all ~K~ in ~Result.Upper .. A'Last~ then ~V < A(K)~ (this range may be empty)

This algorithm is the combination of the result of both [[Search_Lower_Bound.org][Search_Lower_Bound]] and [[Search_Upper_Bound.org][Search_Upper_Bound]], so the 
properties of the returned ~Option_Pair~ can be easily infered from those of the result of these two functions.


*** Specification of Search_Equal_Range

This algorithm can be specified as follows:

#+INCLUDE: ../../../binary-search/search_equal_range_p.ads :src ada :range-begin "function Search_Equal_Range" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "12-38"

In this specification there are two preconditions:
- ~A~ should be sorted, as with all binary search algorithms 
- ~A'Last~ should be less than ~Positive'Last~ as the returned values can be equal to ~A'Last +1~

The postconditions are expresses with contract cases, stating that:
- there are no indexes returned if the array is empty
- if the array is not empty then a valid pais of indexes is returned, and:
  1. the pair of indexes verify ~A'First <= Result'Lower <= Result.Upper <= A'Last +1
  2. for all ~K~ in ~A'First .. Result.Lower - 1~ then ~A(K) < V~ (This range may be empty)
  3. for all ~K~ in ~Result.Lower .. Result.Upper - 1~ then ~A(K) = V~ (This range may be empty)
  4. for all ~K~ in ~Result.Upper .. A'Last~ then ~V < A(K)~ (this range may be empty)

*** Implementations of Search_Equal_Range

We will present two implementations of this algorithm, both using the same specification.

**** First implementation

The ~Search_Equal_Range~ can be easily implemented using the two previous functions, as they directly provide the desired pair of indexes:

#+INCLUDE: ../../../binary-search/search_equal_range2_p.adb :src ada :range-begin "function Search_Equal_Range2" :range-end "End Search_Equal_Range2;" :lines "4-66"

~gnatprove~ doesn't need any annotations other than the specification of the function itself to prove this implementation.

**** A more elaborate implementation

The first version, while being easy to implement, undestand and prove, does some work two times. This is why another implementation is proposed in the C++ standard library, 
which in ADA translates to:

#+INCLUDE: ../../../binary-search/search_equal_range_p.adb :src ada :range-begin "function Search_Equal_Range" :range-end "End Search_Equal_Range;" :lines "4-22"	

The working principle of this code is to narrow down at the same time the ranges where ~Search_Lower_Bound~ 
and ~Search_Upper_Bound~ will look for the results, where these two programms would both do the same job otherwise.

The loop variant is ~Right - Left~, which decreases at each iteration.
The loop invariants express that:
- ~Left~ and ~Right~ remain in the correct range, and in the correct position with relation to eachother
- that all values found at an index striclty lower than ~Left~ are less than ~V~
- that all values found at an index greater or equal than ~Right~ are striclty greater than ~V~.

These loop invariants, in additions to the post-conditions of ~Search_Lower_Bound~ and ~Search_Upper_Bound~ enable ~gnatprove~ to prove everything.
