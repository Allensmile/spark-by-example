#+EXPORT_FILE_NAME: ../../../heap/Push_Heap.org
#+OPTIONS: author:nil title:nil toc:nil

** The Push_Heap algorithm

   When adding (/pushing/) a new value ~V~ into a heap represented by
   a complete binary tree, the idea is to put ~V~ at the first
   available place in the tree and to make ~V~ "go up" on the path to
   the root of the tree to find its place. The same principle will be
   applied on our array representation of the heap.

   The ~Push_Heap~ algorithm takes a ~Heap~ with the value to be added
   placed at the first available index of the array and makes the
   value go up into the heap to match the property ~Is_Heap~. Its
   signature is the following:

   #+BEGIN_SRC ada
     procedure Push_Heap (H : in out Heap)
   #+END_SRC

*** Specification of Push_Heap

    In order to specify ~Push_Heap~, we must be able to express that
    the elements contained in the array up to index ~Size~ are the
    same up to a permutation. As the array encapsulated in the ~Heap~
    record type can be viewed as a multiset of ~T~ values and such
    properties can be expressed on multisets, we use the predicates
    already defined when proving the [[../mutating/Remove_Copy.org][Remove_Copy]] algorithm,
    particularly the ~Multiset_Unchanged~ predicate

    The specification of ~Push_Heap~ is rather simple to express:

    #+INCLUDE: "../../../heap/push_heap_p.ads" :src ada :range-begin "procedure Push_Heap" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "8-19"

    The preconditions express the following assertions:
    - the heap is not full
    - the heap without its last value verifies the properties of a
      heap. Notice that our array representation is rather simple as
      we only have to consider the array up to index ~Size - 1~ to
      have the heap without the last value

    The postconditions express the following assertions:
    - the array up to index ~Size~ verifies the properties of a heap
    - the array in the heap after the call is just a permutation of
      the array in the heap before the call, i.e. the elements in the
      array after the call are exactly the same than the ones before
      the call.
    - the size of the heap has not been modified

*** New predicates on multisets

    In order to easily express properties on heaps, particularly
    properties on permutations, three new multiset predicates will be
    defined.

**** The Multiset_Add and Multiset_Minus predicates

     The ~Multiset_Add~ and ~Multiset_Minus~ predicates are used to
     check whether the number of occurrences of a given value ~Val~
     has increased or decreased.

     #+INCLUDE: "../../../spec/multiset_predicates.ads" :src ada :range-begin "function Multiset_Add" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "31-37"

     #+INCLUDE: "../../../spec/multiset_predicates.ads" :src ada :range-begin "function Multiset_Minus" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "38-43"

     The precondition on ~Multiset_Add~ is used to prevent possible
     overflows.

**** Another Multiset_Retain_Rest_Double predicate

     We have already defined predicates on multisets for the
     [[../mutating/Remove_Copy.org][Remove_Copy]] algorithm, particularly a predicate
     ~Multiset_Retain_Rest~ to check whether two arrays are equal up
     to a permutation except for a particular value. As we will see
     later, we will need another form of ~Multiset_Retain_Rest~, but
     this time with two excluded values. The definition of
     ~Multiset_Retain_Rest_Double~ is not that different from
     ~Multiset_Retain_Rest~:

     #+INCLUDE: "../../../spec/multiset_predicates.ads" :src ada :range-begin "function Multiset_Retain_Rest_Double" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "16-24"

*** Implementation of Push_Heap

    The implementation of ~Push_Heap~ in ACSL By Example is split in
    three parts: the prologue, the main act and the epilogue. We
    follow the same architecture in our implementation in SPARK,
    presenting the implementation and the lemmas helping the prover to
    prove the parts. The main idea of the algorithm is to make the
    value at index ~Size~ in the array "go up" through the heap until
    it finds a correct place.

**** Prologue
***** Implementation of Prologue

      The prologue part of the implementation is the following:

      #+INCLUDE: "../../../heap/push_heap_p.adb" :src ada :range-begin "procedure Push_Heap" :range-end "-- end of Prologue" :lines "3-30"

      The only variables used here are ~V~, ~Hole~ and ~A_Old~. ~V~ is
      the value at the index ~Size~ in the array, i.e. the value to be
      added. ~Hole~ represent the index in the heap being currently
      checked for heap consistency. ~A_Old~ is a ghost variable
      containing the state of the heap array before the call.

      Let us briefly explain what happens in the prologue:

      - if the size of the heap is ~1~, there's no need to do
        anything, so we jump directly to the en of the procedure
      - otherwise we assign ~Hole~ with the index of the parent of
        index ~Size~ in the array and if the value of the parent node
        is less than ~V~, we store this value at index ~Size~.

        Notice that at this point, the slice ~H.A (1 .. H.Size)~
        respects the properties of a heap and that the value of the
        parent node of node at index ~Size~ is duplicated.

***** The Make_Prove_Prologue procedure

      We want to prove the previous property at the end of the
      prologue: ~H.A (1 .. H.Size)~ is a heap, ~H.A (Hole)~ is
      duplicated and ~V~ has lost one occurrence in ~A~. The
      ~Make_Prove_Prologue~ represents this property:

      #+INCLUDE: "../../../lemmas/push_heap_lemmas.ads" :src ada :range-begin "procedure Make_Prove_Prologue" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "12-23"

      The postcondition of ~Make_Prove_Prologue~ correctly represents
      what is expected at the end of the prologue. Notice that the
      preconditions are valid at this state of the procedure.

      As usual, we have to give an implementation of the lemma to
      guide the provers:

      #+INCLUDE: "../../../lemmas/push_heap_lemmas.adb" :src ada :range-begin "procedure Make_Prove_Prologue" :range-end "End Make_Prove_Prologue;" :lines "5-20"

      The implementation is quite basic for this kind of lemma (we
      loop on ~T~ values), except for the loop invariant which is a
      bit different from the previous ones, because of the new
      predicates: we want to show that ~V~ has lost an occurrence and
      ~A (Hole)~ has one extra occurrence.

      With this implementation and specification, ~GNATprove~ proves
      the lemma and the assertions at the end of the prologue, i.e.:
      - the array is now a heap (because ~A (1 .. Size - 1)~ was a
        heap
      - the multiset predicates are verified

**** Main act
***** Implementation of Main Act

      In the main act we go up in the tree representating the heap to
      find the index where we can put the value ~V~. Of course we will
      switch values accordingly. The implementation of the Main Act is
      the following:

      #+INCLUDE: "../../../heap/push_heap_p.adb" :src ada :range-begin "-- beginning of Main Act" :range-end "-- end of Main Act" :lines "31-75"

      The actual code is not that long: we modify in the llop the
      position of the ~Hole~ index (we go up in the heap) to find the
      final index where we will insert ~V~ in the Epilogue phase of
      the algorithm. When going up, we exchange the value of the
      current node (represented by the ~Hole~ index) with the value of
      its parent.

      In order to prove the loop, we use a ~A_Save~ array which is a
      copy of ~A~ at the beginning of each iteration (notice that
      ~A_Save~ is a ghost variable, hence does not impact the
      performance of the algorithm). Since we just modify one value in
      ~A~ at each iteration, we can use the ~Is_Set~ predicate
      previously defined to compare ~A~ with ~A_Save~.

      As for the Prologue, we will define a ~Make_Prove_Loop~ lemma
      which calculates the ~Multiset~ properties that hold between ~A~
      and ~A_Old~, considering the predicates between ~A~ and ~A_Save~
      and between ~A_Save~ and ~A_Old~. The next subsections detail
      ~Make_Prove_Loop~.

      The loop invariants specify the fact that:
      - ~Hole~ is in the right range.
      - ~H~ is a heap.
      - ~Parent~ is the parent of ~Hole~ if ~Hole > 1~.
      - the multiset predicates are verified: the number of
        occurrences of ~H.A (Hole)~ has been incremented by one
        (remember that ~Hole~ is the index of the parent node!), ~V~
        has lost an occurrence compared to ~A_Old~ and the occurrences
        of the other values have not changed

***** The Make_Prove_Loop lemma

      The ~Make_Prove_Loop~ lemma helps proving the multiset
      predicates between ~A~ and ~A_Old~ considering the predicates
      holding between ~A_Old~ and ~A_Save~ and between ~A~ and
      ~A_Save~. Its specification is:

      #+INCLUDE: "../../../lemmas/push_heap_lemmas.ads" :src ada :range-begin "procedure Make_Prove_Loop" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "24-39"

      Its implementation is:

      #+INCLUDE: "../../../lemmas/push_heap_lemmas.adb" :src ada :range-begin "procedure Make_Prove_Prologue" :range-end "End Make_Prove_Prologue;" :lines "5-20"

      The only thing to do during the loop is to calculate the number
      of occurrences of the values in ~A~, considering the number of
      occurrences in ~A_Save~ (only one value differs between ~A~ and
      ~A_Save~ at this point of the algorithm).

      Using ~Make_Prove_Loop~, ~GNATprove~ proves the main act.

**** Epilogue
***** Implementation of Epilogue

      Now that the final index where ~V~ can be has been found, we just have to insert
      ~V~ in the array. The implementation of the Epilogue is:

      #+INCLUDE: "../../../heap/push_heap_p.adb" :src ada :range-begin "-- beginning of Epilogue" :range-end "end Push_Heap;" :lines "76-89"

      We need to make a final backup ~A_Save~ of the array to prove
      the ~Multiset_Unchanged~ predicates between ~A~ and ~A_Old~.

***** The Make_Prove_Epilogue lemma

      The lemma is very similar to the two others and is just here to
      finalize the proof after the Epilogue. Its specification is:

      #+INCLUDE: "../../../lemmas/push_heap_lemmas.ads" :src ada :range-begin "procedure Make_Prove_Epilogue" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "40-53"

      Its implementation is:

      #+INCLUDE: "../../../lemmas/push_heap_lemmas.adb" :src ada :range-begin "procedure Make_Prove_Epilogue" :range-end "end Make_Prove_Epilogue;" :lines "41-55"

      Using ~GNATprove~, the implementations and the specifications,
      everything is now proved.

# Local Variables:
# ispell-dictionary: "english"
# End:
