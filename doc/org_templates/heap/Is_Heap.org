#+EXPORT_FILE_NAME: ../../../heap/Is_Heap.org
#+OPTIONS: author:nil title:nil toc:nil

** The Is_Heap function

   The ~Is_Heap~ function verifies that the given parameter respects
   the properties defining the [[https://en.wikipedia.org/wiki/Heap_(data_structure)][heap data structure]]. Its signature is:

   #+BEGIN_SRC ada
     function Is_Heap (H : Heap) return Boolean
   #+END_SRC

*** The Heap type and the associated predicates

    Heaps are usually represented by complete binary trees, but as
    SPARK prevents the use of access types, we choose another classic
    representation using an array. A heap is therefore simply
    represented by a record containing an array of type ~T_Arr~ and a
    natural number representing the actual size of the heap. We have
    chosen here to limit the capacity of the heap: the indexes of the
    array belong to the range ~1 .. MAX_SIZE~ where ~MAX_SIZE~ is a
    constant defined in ~types.ads~ whose value is ~1000~. The type
    definition is as follows:

    #+INCLUDE: "../../../spec/types.ads" :src ada :range-begin "type Heap" :range-end "end record;" :lines "39-43"

    We have to define predicates to compute the array index of the
    parent, the left child and the right child of a given node of the
    tree represented by its index in the array:

    #+INCLUDE: "../../../spec/heap_predicates.ads" :src ada :range-begin "function Heap_Parent" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "17-21"

    #+INCLUDE: "../../../spec/heap_predicates.ads" :src ada :range-begin "function Heap_Left" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-11"

    #+INCLUDE: "../../../spec/heap_predicates.ads" :src ada :range-begin "function Heap_Right" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "12-16"

*** The Is_Heap_Def predicate

    In order to specify our function we need to write a predicate
    formally defining what a correct heap is:

    #+INCLUDE: "../../../spec/heap_predicates.ads" :src ada :range-begin "function Is_Heap_Def" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "22-30"

    This predicate checks that the actual size of the heap is less
    than the last index of the array storing the heap and that the
    heap is either empty or that for all index ~I~ greater than two,
    then the value at index ~I~ is less than the value of the parent
    of ~I~.

*** Specification of Is_Heap

    The ~Is_Heap~ can be specified as follows:

    #+INCLUDE: "../../../heap/is_heap_p.ads" :src ada :range-begin "function Is_Heap" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-9"

    There is no precondition on our ~Heap~ record, and the only
    postcondition is that ~Is_Heap~ returns the same result as our
    previously defined predicate.

*** Implementation of Is_Heap

    ~Is_Heap~ can be implemented in the following way:

    #+INCLUDE: "../../../heap/is_heap_p.adb" :src ada :range-begin "function Is_Heap" :range-end "End Is_Heap;" :lines "4-37"

    We first check that the member ~Size~ of ~H~ is valid, i.e. less
    that the length of the record array. We then verify that for each
    index that can be a child (~Child >=2~) the value found at its
    parent's index is greater that the value found at the child's
    index.

    The loop invariants specify that:
    - the variables ~Parent~ and ~Child~ are in the correct range and
      that ~Parent~ is less than ~Child~
    - that ~Child~ is indeed a child of ~Parent~
    - that the ~Heap~ record constituted of the original array, but
      with size set to ~Child~ is a heap. This checks that the first
      ~Child~ values of ~H.A~ form a heap.

    With this specification and implementation, ~GNATprove~ proves everything.

# Local Variables:
# ispell-dictionary: "english"
# End:
