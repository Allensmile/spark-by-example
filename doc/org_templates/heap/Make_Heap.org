#+EXPORT_FILE_NAME: ../../../heap/Heap.org
#+OPTIONS: author:nil title:nil toc:nil
* The Make_Heap algorithm

  The ~Make_Heap~ algorithm will take an array and return a heap
  with the same values. Its signature reads:
  #+BEGIN_SRC ada
  function Make_Heap (A : T_Arr) return Heap
  #+END_SRC

** Specification of Make_Heap

   The specification of ~Make_Heap~ is the following:
   #+INCLUDE: ../../../heap/make_heap_p.ads :src ada :lines "11-21"

   The function takes in entry an array with its length less than the maximum size
   of a heap. 
   - If this array is empty, the returned heap will be also empty.
   - If this array is not empty, the returned heap will have the same size from
     the array and its array will be a permutation of the entry array.

** Implementation of Make_Heap

*** First implementation

   The implementation of ~Make_Heap~ is the following:

   #+BEGIN_SRC ada
      function Make_Heap (A : T_Arr) return Heap is
      Result : Heap;
   begin
      if A'Length > 0 then

         Result.A (1) := A (A'First);
         Result.Size := 1;


         for J in A'First + 1 .. A'Last loop

            Result.Size := Result.Size+1;
            Result.A (J - A'First + 1) := A (J);
            Push_Heap (Result);

            pragma Loop_Invariant (Result.Size = J - A'First + 1);
            pragma Loop_Invariant (Is_Heap (Result));
            pragma Loop_Invariant
              (Multiset_Unchanged
                 (A (A'First .. J),
                  Result.A(1 .. J - A'First + 1)));

         end loop;

      end if;
      return Result;
   #+END_SRC

   The loop invariants specify the fact that:
     - The size is increasing at each loop.
     - The heap verifies the properties of a heap.
     - The partial array of the heap is a permutation of the partial entry array.

   As usual, we need to help the prover with some lemmas to prove the multiset predicate.

*** The Unchanged_Transitivity lemma

    This lemma helps proving the transitivity property of ~Multiset_Unchanged~.
    Its specification is:
    #+INCLUDE: ../../../lemmas/classic_lemmas.ads :src ada :lines "44-52"

    Its implementation is:
    #+INCLUDE: ../../../lemmas/classic_lemmas.adb :src ada :lines "44-55"

    We use the predicate ~Occ_Eq~ already defined in the case where ~B=C~.

*** The New_Element lemma

    This lemma is used when we add the ~I~ th element of ~A~ at the end of the array of the heap.
    The two partial arrays, when their last element is removed, are permutations of each other.
    This lemma helps proving that when adding the same element at the end, the arrays are
    still permutations.

    Its specification is:
    #+INCLUDE: ../../../lemmas/classic_lemmas.ads :src ada :lines "36-43"

    Its implementation is:
    #+INCLUDE: ../../../lemmas/classic_lemmas.adb :src ada :lines "35-43"
 
*** Final implementation of Make_Heap

    This final implementation is:
    #+INCLUDE: ../../../heap/make_heap_p.adb :src ada :lines "4-62"

    Using ~gnatprove~, this implementation and the specification above, everything is proved.
