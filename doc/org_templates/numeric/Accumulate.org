#+EXPORT_FILE_NAME: ../../../numeric/Accumulate.org
#+OPTIONS: author:nil title:nil toc:nil
** The Accumulate algorithm

The ~Accumulate~ algorithm will compute the sum of the elements of an array. Its signature reads:

#+BEGIN_SRC ada
function Accumulate(A : T_Arr; Init : T) return T
#+END_SRC

The algorithm will return ~Init+A(A'First)+A(A'First+1)+ ... + A(A'Last)~.

The algorithms presented in this chapter do not introduce any real difficulties when comes time to prove them,
except for one aspect, which is the proof that there won't be overflow issues. We will present two 
versions of this algorithm, one which tries to "naïvely" handle the overflow checks, and another version
which deals with overflow proof correctly.

*** A naïve accumulate

**** Predicates used

To be able to write the preconditions and postconditions of ~accumulate we first need to write a 
predicate defining what the result of our function should be:

#+INCLUDE: ../../../spec/acc_def_naive.ads :src ada :range-begin "function Acc_Def_Rec" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-14"
#+INCLUDE: ../../../spec/acc_def_naive.ads :src ada :range-begin "function Acc_Def_Rec" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-14"

**** Specification of Accumulate

With the given predicates we can write a specification for ~Accumulate~:

#+INCLUDE: ../../../numeric/accumulate_naive.ads :src ada :range-begin "function Accumulate_Naive" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-10"

Here the precondition expresses that all the intermediary sums we are going to
evaluate should not overflow. The postcondition expresses that our algorithm 
returns the correct value.

**** Implementation of Accumulate

One implementation satifying our specification is:

#+INCLUDE: ../../../numeric/accumulate_naive.adb :src ada :range-begin "function Accumulate_Naive" :range-end "End Accumulate_Naive;" :lines "4-17"

Here the assertion in the loop verifies that there won't be any overflows during the sum, and the loop
invariant ensures that we have donne the correct calculations.

With this implementation the assertion, the loop invariant and the postcondition is proved.
Nevertheless, ~GNATprove~ outputs two ~mediums~:
#+BEGIN_SRC 
acc_def_naive.ads:8:13: medium: subprogram "Acc_Def_Rec" might not terminate, terminating annotation could be incorrect
acc_def_naive.ads:14:54: medium: overflow check might fail
#+END_SRC

The first one is simply due to the recursive nature of ~Acc_Ref_Rec~. 
The second line makes reference to the line of ~Acc_Def_Rec~ where the sum occurs. Indeed at this point
SPARK has no way of knowing wether the sum will overflow or not. This is why we need to rewrite our functions to avoid
any potential overflow in any part of the code.

*** A correct version of Accumulate

As mentionned before we need to take care of the overflows in ~Acc_Def_Rec~.
The solution proposed here was proposed by Claire Dross from Adacore.

**** Predicates used

To be able to specify that the sums we will compute do not generate any overflow we will first introduce a new option type:

#+INCLUDE: ../../../spec/types.ads :src ada :lines "9-17"

The working principle is the same as the ~Option~ type defined in [[../non-mutating/README.org][Chapter 3]].

The next function may be the most important of our new version, as it will enable us to verify that no overflow occur:

#+INCLUDE: ../../../spec/overflow.ads :src ada :range-begin "function Add_No_Overflow" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-12"

In this function we verify that the sum of ~X~ and ~Y~ will not generate an overflow. We cannot check directly the result
of ~X+Y~, so in order to make the verification we only make operations we know that the won't overflow. That is why we separate 
our check in two cases: if ~Y~ is positive, then we need to make sure that ~X+Y~ is less than ~T'Last~ mathematicaly, which is equivalent to 
verifying that ~X <= T'Last-Y~. This last comparison only contains expressions that won't trigger any overflow. The same methos applies for the case ~Y<0~.

We now have a function that will check wether there will be an overflow or not, so with our new type and our new function we give the folowing 
rewrite of ~Acc_Def_Rec~:

#+INCLUDE: ../../../spec/acc_def_p.ads :src ada :range-begin "function Acc_Def_Rec" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "11-26"
#+INCLUDE: ../../../spec/acc_def_p.ads :src ada :range-begin "function Acc_Def" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "28-34"

~Acc_Def_Rec~ has been updated to return a ~T_Option~ whith ~Value~ containing the sum of the elements 
of ~A~ from index ~F~ to index ~L~, if no overflow happened during the calculation, or will be empty otherwise.

The working principle of the algorithm is the same, we simply make sure that there are no overflows in the 
previous calculations, and that the sum of the result of ~Acc_Def_Rec(A,F,L-1,Init) + A(L)~ does not overflow.

**** Specification of Accumulate

We can now rewrite the specification for ~Accumulate~:

#+INCLUDE: ../../../numeric/accumulate_p.ads :src ada :range-begin "function Accumulate" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-10"


The precondition and postcondition are virtually the same, the simply make use of the new return type
of ~Acc_Def_Rec~. We do not need to check that ~Acc_Def(A,A'First,A'Last,Init).Value~ exists in the precondition, since this is already ensured by the precondition.

**** Implementation of Accumulate

An implementation deriving from the previous specification can be:

#+INCLUDE: ../../../numeric/accumulate_p.adb :src ada :range-begin "function Accumulate" :range-end "End Accumulate;" :lines "4-16"

The assertion here checks that there are no overflow when adding ~A(J)~ to the intermediary result.
The loop invariant ensures we are doing the right calculations.

With this specification and implementation everything is proved by ~GNATprove~.
# Local Variables:
# ispell-dictionary: "english"
# End:
