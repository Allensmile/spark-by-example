#+EXPORT_FILE_NAME: ../../../numeric/Iota.org
#+OPTIONS: author:nil title:nil toc:nil
** The Iota algorithm

The ~iota~ algorithm assign increasing values to an array, where the initial
value is specified by the user. Its signature reads:
~procedure Iota(A : in out T_Arr ; Val : T)~

*** The predicate Is_Iota

The predicate ~Is_Iota~ will be used to verify the fact that an array
has increasing values starting at a certain value.
It is defined as follows:

#+INCLUDE: ../../../spec/is_iota_p.ads :src ada :lines "6-11"


Notice that the precondition ensures that no overflow will happen.

*** Specification of Iota

The specification of ~iota~ is rather simple:
#+INCLUDE: ../../../numeric.iota_p.ads :src ada :lines "6-10"

The precondition is necessary to prevent possible overflows.

*** Implementation of Iota

The implementation of ~iota~ is the following.

#+INCLUDE: ../../../numeric/iota_p.adb :src ada :lines "3-13"

The loop invariants specify the fact that:
   - ~count~ is indeed a counter starting at ~Val~ and has the right value
   - the predicate ~Is_Iota~ is verified for the sliced array ~A(A'First .. I)~.

Using ~gnatprove~, everything is proved.
