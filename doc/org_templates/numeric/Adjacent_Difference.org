#+EXPORT_FILE_NAME: ../../../numeric/Adjacent_Difference.org
#+OPTIONS: author:nil title:nil toc:nil

** The Adjacent_Difference algorithm

   The ~Adjacent_Difference~ algorithm will compute for each index ~J~
   of an array ~A~ the difference between the value at index ~J~ and the
   value at index ~J - 1~. The results are stored in another array
   ~B~. Its signature is the following:

   #+BEGIN_SRC ada
     procedure Adjacent_Difference (A : T_Arr; B : in out T_Arr)
   #+END_SRC

*** Predicate used

    To be able to properly specify this algorithm, we need to write an
    overflow verification function for substractions. One could argue
    that using the function ~Add_No_Overflow~ defined for function
    [[Accumulate.org][Accumulate]] with a minus sign in front of the second argument is
    sufficient, but our function must work with the entire range of
    ~T~, which is the entire range of Ada ~Integer~. There is
    therefore one case in which executing ~- Y~ triggers an overflow,
    since there is one more negative value in ~Integer~ than positive
    values.

    The function ~Minus_No_Overflow~ is defined as follows:

    #+INCLUDE: "../../../spec/overflow.ads" :src ada :range-begin "function Minus_No_Overflow" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "14-19"

    Of course, this function is implemented and specified like
    ~Add_No_Overflow~.

*** Specification of Adjacent_Difference

    We can now give a specification for ~Adjacent_Difference~:

    #+INCLUDE: "../../../numeric/adjacent_difference_p.ads" :src ada :range-begin "procedure Adjacent_Difference" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "8-22"

    The precondition states that there should be no overflow when
    subtracting any value to the one following, and that both arrays
    should be of same length.

    The postcondition ensures that the first elements of both arrays
    are equal, and that each element of ~B~ is the result of the
    subtraction of the corresponding element and the previous one in
    ~A~.

*** Implementation of Adjacent_Difference

    We can write an implementation for the procedure respecting the
    previous specification easily:

    #+INCLUDE: "../../../numeric/adjacent_difference_p.adb" :src ada :range-begin "procedure Adjacent_Difference" :range-end "End Adjacent_Difference;" :lines "5-31"

    The algorithm is really simple. There is only one assertion inside
    the loop to check that there is no overflow when computing the
    difference of ~A (J)~ and ~A (J - 1)~. The loop invariants verify
    that we are doing the correct calculation, and that the first
    index of ~B~ is constant.

    This implementation is proved by ~GNATprove~.

# Local Variables:
# ispell-dictionary: "english"
# End:
