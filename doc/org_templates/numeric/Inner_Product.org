#+EXPORT_FILE_NAME: ../../../numeric/Inner_Product.org
#+OPTIONS: author:nil title:nil toc:nil
* The Inner_Product algorithm

  The ~Inner_Product~ algorithm applies the scalar product between two vectors ~A~ and ~B~ and adds
  it to an initial value ~Init~.
  Its signature reads:
  ~function Inner_Product (A : T_Arr; B : T_Arr; Init : T) return T~

** The predicates used
*** The Multiply_No_Overflow predicate

   This predicate will check if there will be an overflow due to te multiplication of two
   ~T~ values. Thanks to Claire Dross from AdaCore for the help and solution provided to
   prove the function below.

   The specification of ~Multiply_No_Overflow~ is:
   #+BEGIN_SRC ada
   function Multiply_No_Overflow
     (X, Y : T) return Boolean is
     (case X is
         when 0              => True,
         when -1             => Y /= T'First,
         when T'First .. - 2 => Y in T'Last / X .. T'First / X,
         when 1 .. T'Last    => Y in T'First / X .. T'Last / X)
   with
       Contract_Cases =>
         ((X * Y in T) => Multiply_No_Overflow'Result = True,
          others       => Multiply_No_Overflow'Result = False);
   #+END_SRC

   With just this specification, ~GNATprove~ does not prove the function. This is
   due to the fact that the properties we are trying to prove are non-linear
   arithmetics properties. Therefore, we need to write an implementation to help
   it proving the contract cases.

   The new specification is:

   #+INCLUDE: ../../../spec/overflow.ads :src ada :range-begin "function Multiply_No_Overflow" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "19-23"

   And its implementation is:
   
   #+INCLUDE: ../../../spec/overflow.adb :src ada :range-begin "function Multiply_No_Overflow" :range-end "End Multiply_No_Overflow;" :lines "6-25"

   Using this implementation and specification, ~GNATprove~ proves the contract cases.
   We will also use the ~Add_No_Overflow~ predicate defined in the ~Accumulate~ algorithm.

*** The Inner_Prod_Def_Rec function

    Based on the ~Acc_Def_Rec~ function, we can write a similar function to
    calculate recursively the scalar product.

    #+INCLUDE: ../../../spec/inner_prod_def_p.ads :src ada :range-begin "function Inner_Prod_Def_Rec" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-27"


    The function is very similar, except for the fact that we have to check
    first the fact that there is no overflow when multiplying the two values in the
    array before checking the fact that there is no overflow when adding the product
    and the previous result.

*** The Inner_Prod_Def function

    Therefore, we can define the ~Inner_Prod_Def~ function that calls the recursive function.

    #+INCLUDE: ../../../spec/inner_prod_def_p.ads :src ada :range-begin "function Inner_Prod_Def" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "29-37"

** Specification of ~Inner_Product~

   The specification of ~Inner_Product~ is the following:

   #+INCLUDE: ../../../numeric/inner_product_p.ads :src ada :range-begin "function Inner_Product" :range-end "\s-*return\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-13"


   We check first that no overflow will occur during the algorithm. The postcondition
   is the fact that the result has to be the same as the one recursively calculated.

** Implementation of ~Inner_Product~

   The implementation of ~Inner_Product~ is quite simple:
   #+INCLUDE: ../../../numeric/inner_product_p.adb :src ada :range-begin "function Inner_Product" :range-end "End Inner_Product;" :lines "3-17"

   As in ~Accumulate~, the assertion is here to help the prover
   with the overflow checks.

   Using this implementation and specification, ~GNATprove~ manages to prove
   everything except for the termination of ~Inner_Prod_Def_Rec~, as usual.
