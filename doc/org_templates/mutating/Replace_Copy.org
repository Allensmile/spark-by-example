#+EXPORT_FILE_NAME: ../../../mutating/Replace_Copy.org
#+OPTIONS: author:nil title:nil toc:nil

** The Replace_Copy algorithm

   The ~Replace_Copy~ algorithm takes an array as an input and
   substitutes all the elements equal to a given value ~V~ by another
   value ~W~, and finally copies the result in another array:

   #+BEGIN_SRC ada
     procedure Replace_Copy (A : T_Arr, B : in out T_Arr; V : T; W : T)
   #+END_SRC

*** The Is_Replaced predicate

    In order to write a more concise specification and more readable
    loop invariants, we define a ~Is_Replaced~ predicate as follows:

    #+INCLUDE: "../../../spec/is_replaced_p.ads" :src ada :range-begin "function Is_Replaced" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "8-18"

    This predicate requires that both arrays are of same length, and
    returns ~True~ if ~B~ is equal to ~A~ except for indexes ~K~ of
    ~A~ where ~A(K) = V~. In that case, the element at the matching
    index of ~B~ should be equal to ~W~. In a less formal way, ~B~ is
    equal to a copy of ~A~ where all the ~V~ values were replaced by
    ~W~.

*** Specification of Replace_Copy

    ~Replace_Copy~ can be specified as follows:

    #+INCLUDE: "../../../mutating/replace_copy_p.ads" :src ada :range-begin "procedure Replace_Copy" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "8-15"

    The only precondition is that both arrays should be of same
    length. The postcondition expresses that ~B~ is indeed a copy of
    ~A~ where all occurences of ~V~ have been replace by ~W~ using the
    predicate previously defined.

*** Implementation of Replace_Copy

    #+INCLUDE: "../../../mutating/replace_copy_p.adb" :src ada :range-begin "procedure Replace_Copy" :range-end "end Replace_Copy;" :lines "5-22"

    The loop invariant simply specifies that the sub-array of ~B~
    created from the indexes already covered by the algorithm verifies
    the condition of being equal to ~A~ with all occurrences of ~V~
    replaced by ~W~.

    With this specification and implementation, ~GNATprove~ manages to
    prove everything.

# Local Variables:
# ispell-dictionary: "english"
# End:
