#+EXPORT_FILE_NAME: ../../../mutating/Replace.org
#+OPTIONS: author:nil title:nil toc:nil

** The Replace algorithm

   The ~replace~ algorithm replaces all the occurrences of a value ~V~
   with another value ~W~. As for ~Rotate~ and ~Rotate_Copy~, it is
   the same as [[Replace_Copy.org][Replace_Copy]] except for the fact that it does not store
   the result in another array but uses the same array.

   #+BEGIN_SRC ada
        procedure Replace (A : in out T_Arr; Val : T ; Rep : T)
   #+END_SRC

*** Specification of Replace

    We use the function ~Is_Replaced~ defined in the previous
    algorithm for the specification:

    #+INCLUDE: "../../../mutating/replace_p.ads" :src ada :range-begin "procedure Replace" :range-end "\s-*(\([^()]*?\(?:\n[^()]*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-12"

*** Implementation of Replace

    The implementation of ~replace~ is:

    #+INCLUDE: "../../../mutating/replace_p.adb" :src ada :range-begin "procedure Replace" :range-end "end Replace;" :lines "4-23"

    The first loop invariant specifies the same thing as the loop
    invariant in ~Replace_Copy~. The second is necessary because we
    have an ~out~ parameter, meaning that the values after ~J~ could
    be changed in the loop. We specify in this second loop invariant
    that ~A~ has not been changed after index ~J~.

    Using ~GNATprove~, everything is proved.

# Local Variables:
# ispell-dictionary: "english"
# End:
