#+EXPORT_FILE_NAME: ../../../mutating/Reverse_Copy.org
#+OPTIONS: author:nil title:nil toc:nil

** The Reverse_Copy algorithm

The ~Reverse_Copy~ algorithm inverts the order of the elements of a given array ~A~ in another array ~B~ without modifying ~A~.
Its signature reads:

#+BEGIN_SRC ada 
 procedure Reverse_Copy(A : T_Arr; B : in out T_Arr)
#+END_SRC

*** The Is_Reversed predicate

In order to specify and implement the ~Reverse_Copy~ properly we will first define a predicate in order
to hide all the quantifiers and make our code more readable. The predicate ~Is_Reversed~ is defined as follows:

	#+INCLUDE: ../../../spec/is_reversed_p.ads :src ada :range-begin "function Is_Reversed" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-12"

This predicate, on the condition that the two arrays given as parameter are of same length will check 
wether the elements of ~A~ are in reverse order of those of ~B~, i.e. ~A(A'Last) = B(B'First); A(A'Last -1) = B(B'First +1) ...~ and so on.
 
*** Specification of Reverse_Copy

~Reverse_Copy~ can be specified as follows :

	#+INCLUDE: ../../../mutating/reverse_copy_p.ads :src ada :range-begin "procedure Reverse_Copy" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "7-10"

The precondition verifies that ~A~ and ~B~ are of same length; the postcondition ensures that ~A~ is indeed in the reverse order of ~B~.

*** Implementation of Reverse_Copy

~Reverse_Copy~ is implemented in the following way:

	#+INCLUDE: ../../../mutating/reverse_copy_p.adb :src ada :range-begin "procedure Reverse_Copy" :range-end "end Reverse_Copy;" :lines "4-17"

The implementation is straightforward, the loop variant is classicaly I, and the loop invariant
specifies that the sub-array composed of the first ~I-B'First~ elements of ~B~ is in reverse order of
the sub-array of same length, composed of the last elements of ~A~.

When using ~gnatprove~ on this implementation and specification, everything is proved.
