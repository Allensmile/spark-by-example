#+EXPORT_FILE_NAME: ../../../classic-sorting/Heap_Sort.org
#+OPTIONS: author:nil title:nil toc:nil

** The Heap_Sort algorithm

   The ~Heap_Sort~ algorithm is an efficient sorting algorithm which
   makes use of the previously developed heap data structure and the
   corresponding algorithms, which can be found in the [[../heap/README.org][chapter on
   heaps]]. Its signature is the following:

   #+BEGIN_SRC ada
     procedure Heap_Sort (A : in out T_Arr)
   #+END_SRC

*** Specification of Heap_Sort

    ~Heap_Sort~ is a sorting algorithm, and as such its specification
    is quite similar to the one of [[Selection_Sort.org][Selection_Sort]] or [[Insertion_Sort.org][Insertion_Sort]]:

    #+INCLUDE: "../../../classic-sorting/heap_sort_p.ads" :src ada :range-begin "procedure Heap_Sort" :range-end "\s-*(\(.*?\(?:\n.*\)*?\)*)\s-*\([^;]*?\(?:\n[^;]*\)*?\)*;" :lines "11-14"

    The postconditions are identical to those of the previously
    mentioned sorting algorithms, but there are some preconditions,
    due to the fact that the array will be converted to a heap.

*** Implementation of Heap_Sort

    ~Heap_Sort~ will be implemented by simply calling [[../heap/Make_Heap.org][Make_Heap]] and
    [[../heap/Sort_Heap.org][Sort_Heap]] consecutively:

    #+INCLUDE: "../../../classic-sorting/heap_sort_p.adb" :src ada :range-begin "procedure Heap_Sort" :range-end "End Heap_Sort;" :lines "5-28"

    As mentioned above, the only two instructions that are not
    operations on ghost variables or annotations are the call to
    ~Make_Heap~ and ~Sort_Heap~.

    The variables used in this program are:
    - ~H~, a ~Heap~ used to store the array and efficiently sort it
    - ~A_Save~ is a ghost variable used to store the array after the
      elements are rearranged in a heap data structure
    - ~A_Old~ is a ghost variable to store the original state of ~A~
    - ~Size~ is a constant equal to the length of ~A~, it's used to
      avoid array index check errors in the loop invariants using
      slices

    We verify that after sorting the heap the array made of the first
    ~Size~ indexes of ~H.A~ can be obtained by permutations of the
    elements of ~A_Save~. This is done with the help of the lemma
    [[../sorting/Partial_Sort.org][Multiset_With_Eq]]. We then verify that ~H.A (1 .. Size)~ is a
    permutation of ~A_Old~ with the help of [[../heap/Make_Heap.org#the-unchanged_transitivity-lemma][Unchanged_Transitivity]]
    lemma, which establishes the transitivity of ~Multiset_Unchanged~
    because the automatic solvers cannot do it on their own. Finally,
    we copy back ~H.A~ in ~A~ and prove again the transitivity of
    ~Multiset_Unchanged~ on ~A~. This proves the last postcondition,
    the first simply being given by the postcondition of ~Sort_Heap~.

    When using GNATprove with this specification and implementation
    everything is proved.

# Local Variables:
# ispell-dictionary: "english"
# End:
