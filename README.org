* SPARK by Example

  SPARK by Example is a project (greatly) inspired by [[https://github.com/fraunhoferfokus/acsl-by-example][ACSL by Example]], a
  collection of verified C functions and data types from the C++
  standard library. SPARK by Example has two objectives

  - implement and verify the same functions as ACSL by Example using
    SPARK 2014 (a programming language based on Ada)
  - highlight differences between verification of C programs and
    verification of SPARK programs

  Adacore has developed a great tutorial website for Ada/SPARK
  beginners [[https://learn.adacore.com/][here]]. It is recommended to follow this tutorial before
  reading SPARK by Example.

** Tools used

   [[https://www.adacore.com/community][GNAT Community 2018]] has been used for this project. You may
   download and install it using the previous link.

** Content of each directory

   Each directory corresponds to a chapter of ACSL by Example. Each
   directory contains a GNAT Project file (the file ending by ~.gpr~)
   containing informations about the location of the sources
   etc. Common configuration, e.g. GNATprove configuration, is
   specified in the ~spark_by_example_shared.gpr~ file at the project
   root.

   For each algorithm ~Algo~ to be proved, you will find the
   specification of ~Algo~ in the ~algo_p.ads~ file and its
   implementation if the ~algo_p.adb~ file. Specifications and
   implementations are defined in packages. To avoid name clashes with
   functions, packages names have a ~_P~ suffixes, hence the file
   names.

   Ghost functions that may be used in several algorithms are grouped
   in the ~spec~ directory at the root of the project.

   A makefile is provided for each chapter with some default values for
   provers timeouts, levels of proof etc. These default values are
   sufficient to prove the corresponding algorithms with the previous
   tools on a machine equipped with an Intel Core i7-4810MQ CPU and
   16GB of RAM. Moreover, a ~STATS~ option enables the generation of
   statistics on the proof, based on the standard output. generated files
   will be placed in the ~stats~ directory at the root of the project.
   Executing the file [[file:all-chapters.sh][all-chapters.sh]] will proove all the functions,
   gather statistics for all the functions, and generate a recap file in
   the ~stats~ directory.

** Table of contents

  1. [[./non-mutating/README.org][non mutating algorithms]]
  2. [[file:maxmin/README.org][maxmin algorithms]]
  3. [[file:binary-search/README.org][binary-search algorithms]]
  4. [[file:mutating/README.org][mutating algorithms]]
  5. [[file:numeric/README.org][numeric algorithms]]
  6. [[file:heap/README.org][heap algorithms]]
  7. [[file:sorting/README.org][sorting algorithms]]
  8. [[file:classic-sorting/README.org][classic sorting algorithms]]

** References

  - [[http://docs.adacore.com/spark2014-docs/html/ug/index.html][SPARK 2014 user guide 19.0]]
  - [[https://learn.adacore.com/][learn.adacore.com]]

# Local Variables:
# ispell-dictionary: "english"
# flyspell-mode: 1
# End:
