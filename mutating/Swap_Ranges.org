# Created 2018-08-17 Fri 13:56
#+OPTIONS: author:nil title:nil toc:nil
#+EXPORT_FILE_NAME: ../../../mutating/Swap_Ranges.org

* The Swap_Ranges algorithm

The ~Swap_Ranges~ algorithm exchanges the contents of two arrays.
Its signature is the following:

~procedure Swap_Ranges(A : in out T_Arr; B: in out T_Arr)~

** Specification of Swap_Ranges

The specification of ~swap_ranges~ is the following:

#+BEGIN_SRC ada
  procedure Swap_Ranges
    (A : in out T_Arr;
     B : in out T_Arr) with
     Pre  => A'Length = B'Length,
     Post => A'Old = B and then B'Old = A;
#+END_SRC

The precondition expresses the fact that ~A~ and ~B~ must have the
same length. The postcondition expresses the fact that the values
in ~A~ and ~B~ have actually been exchanged. Using SPARK syntax
for arrays, the assertion are easy to write.

** Implementation of Swap_Ranges

#+BEGIN_SRC ada
  procedure Swap_Ranges
    (A : in out T_Arr;
     B : in out T_Arr)
  is
  begin
  
     for J in 0 .. A'Length - 1 loop
        Swap (A (A'First + J), B (B'First + J));
  
        pragma Loop_Invariant
  	(B'Loop_Entry (B'First .. B'First + J) =
  	 A (A'First .. A'First + J));
        pragma Loop_Invariant
  	(A'Loop_Entry (A'First .. A'First + J) =
  	 B (B'First .. B'First + J));
        pragma Loop_Invariant
  	(if B'First + J < B'Last then
  	   B'Loop_Entry (B'First + J + 1 .. B'Last) =
  	   B (B'First + J + 1 .. B'Last));
        pragma Loop_Invariant
  	(if A'First + J < A'Last then
  	   A'Loop_Entry (A'First + J + 1 .. A'Last) =
  	   A (A'First + J + 1 .. A'Last));
     end loop;
  end Swap_Ranges;
#+END_SRC

The loop invariants specify that:
- the ~J~ first values of the arrays have been exchanged
- the next values in the arrays have not been swapped yet

Notice that we cannot use the ~Old~ attribute to refer to the
previous state of the arrays, as ~Old~ is only available in
postconditions. We therefore use the ~Loop_Entry~ attribute that
refers to the value of the arrays before entering the loop.

Using ~GNATprove~, everything is proved.
